/*
 * rach
 *
 * This is an an organization app. it helps keeps books and other items in location.
 *
 * API version: 1.0.0
 * Contact: aravind@agastya-library.in
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ObjectApiController binds http requests to an api service and writes the service results to the http response
type ObjectApiController struct {
	service ObjectApiServicer
	errorHandler ErrorHandler
}

// ObjectApiOption for how the controller is set up.
type ObjectApiOption func(*ObjectApiController)

// WithObjectApiErrorHandler inject ErrorHandler into controller
func WithObjectApiErrorHandler(h ErrorHandler) ObjectApiOption {
	return func(c *ObjectApiController) {
		c.errorHandler = h
	}
}

// NewObjectApiController creates a default api controller
func NewObjectApiController(s ObjectApiServicer, opts ...ObjectApiOption) Router {
	controller := &ObjectApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ObjectApiController
func (c *ObjectApiController) Routes() Routes {
	return Routes{ 
		{
			"DelObj",
			strings.ToUpper("Delete"),
			"/obj",
			c.DelObj,
		},
	}
}

// DelObj - delete an existing obj
func (c *ObjectApiController) DelObj(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.DelObj(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
