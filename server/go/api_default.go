/*
 * rach
 *
 * This is an an organization app. it helps keeps books and other items in location.
 *
 * API version: 1.0.0
 * Contact: aravind@agastya-library.in
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service DefaultApiServicer
	errorHandler ErrorHandler
}

// DefaultApiOption for how the controller is set up.
type DefaultApiOption func(*DefaultApiController)

// WithDefaultApiErrorHandler inject ErrorHandler into controller
func WithDefaultApiErrorHandler(h ErrorHandler) DefaultApiOption {
	return func(c *DefaultApiController) {
		c.errorHandler = h
	}
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer, opts ...DefaultApiOption) Router {
	controller := &DefaultApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{ 
		{
			"AddObj",
			strings.ToUpper("Post"),
			"/obj",
			c.AddObj,
		},
		{
			"GetObj",
			strings.ToUpper("Get"),
			"/obj",
			c.GetObj,
		},
		{
			"UpdateObj",
			strings.ToUpper("Put"),
			"/obj",
			c.UpdateObj,
		},
	}
}

// AddObj - Adds a new object to home
func (c *DefaultApiController) AddObj(w http.ResponseWriter, r *http.Request) {
	objectParam := Object{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&objectParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertObjectRequired(objectParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddObj(r.Context(), objectParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetObj - 
func (c *DefaultApiController) GetObj(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetObj(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateObj - 
func (c *DefaultApiController) UpdateObj(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.UpdateObj(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
